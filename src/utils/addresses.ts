import { Address } from "@graphprotocol/graph-ts"

export let NEWO_TOKEN_ADDRESS = Address.fromString("0x98585dFc8d9e7D48F0b1aE47ce33332CF4237D96")
export let SLP_TOKEN_ADDRESS = Address.fromString("0xc08ED9a9ABEAbcC53875787573DC32Eee5E43513")
export let GNOSIS_SAFE_ADDRESS = Address.fromString("0x4a848F44146Ca6D1D6AA34bcdF3C41093deF1761")
export let ONE_WAY_SWAP_ADDRESS = Address.fromString("0xb3c60348A8f8eD8B260FD1966c9f2b740e6caedF")
export let SYNAPSE_ADDRESS = Address.fromString("0x2796317b0fF8538F253012862c06787Adfb8cEb6")
export let VENEWO_TOKEN_ADDRESS = Address.fromString("0x44dd83E0598e7A3709cF0b2e59D3319418068a65")

// Locked tokens addresses
export let LOCKED_TOKEN_ADDRESS_LIST = mapStringsToAddresses([
  "0x8e72416494994E1a25d6ebFFE53ce9fdA3278bBc",
  "0x3b1248d2d47460F9eAE6846c68e572cD2B2ed46D",
  "0x544aC42D645775E281a6f32dbe430AfF04857041",
  "0xbA58b1e3cDeA14B5e6be36E3480CFf136Cf00646",
  "0xB5C1f235a8997213491A2Ca5c19b42c241418493",
  "0x8Bf07Bd7fD9bA29BcEb0ab3BDA966bC0CF1d6E38",
  "0xf670e6aFa124864502E8ECBcEAe914a117Fd1FAF",
  "0xc4b7267A2bcfe5C408FBE7D117Ab292A14E73185",
  "0xa23f2b846239FB895B0503D4E4674D0A40fde96C",
  "0x0063e4C8d11B22a97F5083960Bf565db1865d62a",
  "0x920220adba8d8792c70b4F20fBA2279bD0E84D3B",
  "0xAb679BCb0Afe141589DB2aE69Cd66845638477b0",
  "0x6D6c49562Fb2D863789FF2EBe7C0e1f741c25C27",
  "0x21FeC73D1249bE1a4890010eF9eb21FcF03E8786",
  "0xd1DC273a167ebB065b7710A49F0C65BC5E61b2d0",
  "0x74C4b3431afF0B4e9d144fA7965e51c7E03e57a7",
  "0xC4f38BCc28a2F6E87f2721902d83155710F11c72",
  "0xe6d3b9b5351e8852a99821D4e5A272d31859F8aa",
  "0x37Fe6Bc3372A2985f8Ac44148A30C0c48e155c93",
  "0x5768fed46fbb1A6E6e6Fc31252561A4d63798913",
  "0xB6a697C818bd978f69e840a40C2EFAD2943113C1",
  "0x7031b9A6d595215fbc47541FA993b8E5BC7D5CD1",
  "0x4B5AbC23084429B2cF9C90b434c12c2d6f57D58e",
])

// Vesting contracts addresses
export let VESTING_CONTRACTS_ADDRESS_LIST = mapStringsToAddresses([
  "0x3A45D981fBdE7A68B0ac2d6a924E2b2F54F957F8",
  "0x172684f05a8fF7D4E2039Dff81970E61be0b7F59",
  "0xb88e326346578433F4359317a4b0a926f1DCF2c9",
  "0x822E928202755e73a8cCB7E74DF4ABd7Ee05f159",
  "0x858774792457043D33101ff6dD7401d189298556",
  "0xE54e74557d28f0B3aB74AF395003D09614cc2403",
  "0xD7a9f4cbc9ED25D31fB69bA1f849ad0603143546",
  "0x54A15440ec5bF2a4d0f5Ff17F8b2B31fA751de32",
  "0xC349230F47C91a9e966406e985a6307eaD99bE14",
  "0x19A55463A31df1d3dD9C1a94Ac5d0d414Dc2f504",
  "0xC0aD0e3410880d4c5C0Ba5852CfEdc9DF57C6a72",
  "0xfC56bc458b7102822707f7f3cA4adf5B627067C6",
  "0xB2de2768e8f4778ad588bf25adCE54369E02EdeF",
  "0x011e9cfb9943F6B3CA5dD2665e7992689d3Dd6d4",
  "0x65E8a77e9e713E9bE8F938626d78aE308E7B4EDA",
  "0x02c52E212DCfcB2679B09C317c9814edCE381e1F",
  "0xC68526d0b3cDff72f77B396B8FD7894B310dc958",
  "0x4bdFC800ABC35881c093EA42d314C876EbddDc0E",
  "0x029be681B0650252730c427b543cB20093852Fff",
  "0xA3D0aF3135637d401203591C074C819a9a3fD530",
  "0x2670a0F9c26FE35ec733b80494381953e8bB1C9b",
  "0x8D4276F569f0F0316827F0a02F8684dd42408A1B",
  "0xeED6e7e66a8cb55cBC127ACdccd61C971538B888",
  "0x8336660eFbDEC2EE59BC1bE183046470f47f11Fd",
  "0xA192Daa85c9d709B7C7CA6bDf655D910D221BC60",
  "0x40B230fb940F288335A22a3A1dd55dD2076fFd63",
  "0x76FA032039C97796c3C478b34960F07180784b08",
  "0x9c55f44e2a06fc0d10bE6924bb4a3750252F6993",
  "0x28fa9FB0593416F10D7a955A16F49b5a23ED5076",
  "0x9aCF467DdC8dE093c19dd181DB55Ced7d99398e6",
  "0xDAcBBf449cf3FD78aa56c38C8ff1732fBB4285B0",
  "0x0560bE223EF17f6493E58d7071C9b22cc8BfD74A",
  "0x05857fA1583E803588A69B73aFD6b5f4A697258F",
  "0xF9D670a3958736230cebCDBCEc4E14dA391169eF",
  "0xa0a60C20aB4C24CF38d3cAa1CA79F3990E1Bfb0d",
  "0x556275d2CFaa7fc5c766f5dEf51551d225faf025",
  "0xa2CB1f395D53A287480Aad788c1F2AeBBcE629eb",
  "0x197984343CC15068829364Cd7c35d62E6061c0C9",
  "0xABc486Ec337e4DDe22a52F13478D0bFB71cD36F8",
  "0x139500E003FB4D8BE28cD227e25B8285ff9749b8",
  "0xb0Ce0Ab1B297269f780Ec2d727B7aa10DF907819",
  "0xe4C212DfBC1a39DcF0eF2AE74131733b99EFAb0E",
  "0x86e4Dc6ffaAC5B393D1e0036aC78ed9b0e19f65E",
  "0x630ddd2cA97978d11420A0EAe3379F094330C479",
  "0x660CAfa6a25a3603d60326828926C2C278fb23c5",
  "0xF2b348849e16224cc0d4e7b390071859A535CF06",
  "0x18f43c33bf3d0f939ffE44E5964561Fa5aaF2799",
  "0x53722C118Ab524f1416163Dfc4916F59d3aeb307",
  "0x70dCD4d354287C95F7A863f5124a9024f1450374",
  "0x300D69B3711FD99E5267626E2c7d800799163Cbd",
])

// TODO: Look into a cleaner way to map this array
// WebAssembly won't compile a simple .map(val => Address.fromString(val) as Address)
// So for now I've made this helper method to loop over the array and return a new array of Addresses
function mapStringsToAddresses(strings: string[]): StaticArray<Address> {
  let addresses: Address[] = new Array<Address>()
  for (let i = 0; i < strings.length; i++) {
    addresses.push(Address.fromString(strings[i]) as Address)
  }
  return StaticArray.fromArray(addresses)
}
